// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToTheIth, screen;
    static boolean black;

    /** Initializes the Screen. */
    function void init() {
        var int pow2, i;
        let screen = 16384;
        let twoToTheIth = Array.new(16);
        let pow2 = 1;
        let black = true;
        while (i < 16) {
            let twoToTheIth[i] = pow2;
            let pow2 = pow2 + pow2;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        while (i < 8192) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let black = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, wordColumn;
        let wordColumn = x / 16;
        let address = 32 * y + wordColumn;
        do Screen.updateBit(address, x - (wordColumn * 16));
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int temp, a, b, dx, dy, diff;
        var int sign;
        if (x1 = x2) { do Screen.drawVerticalLine(x1, y1, y2); }
        else {
            if (y1 = y2) { do Screen.drawHorizontalLine(x1, x2, y1); }
        }
        if (x1 > x2) { 
            let temp = x1; 
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        if (y1 > y2) { let sign = -1; }
        else { let sign = 1; }
        let dx = x2 - x1;
        let dy = Math.abs(y2 - y1);
        while (a < (dx + 1) & (b < (dy + 1))) {
            do Screen.drawPixel(x1 + a, y1 + (sign * b));
            if (diff < 0) { let a = a + 1; let diff = diff + dy; }
            else { let b = b + 1; let diff = diff - dx; }
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int temp, address, wordColumn;
        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let wordColumn = x / 16;
        let address = 32 * y1 + wordColumn;
        while (y1 < (y2 + 1)) {
            do Screen.updateBit(address, x - (wordColumn * 16));
            let address = address + 32;
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int temp, address, wordColumn;
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        // An optimized algorithm would be to update word by word rather
        // than bit by bit. But it is quite cumbersome to cover all edge cases.
        while (x1 < (x2 + 1)) {
            let wordColumn = x1 / 16;
            let address = 32 * y + wordColumn;
            do Screen.updateBit(address, x1 - (wordColumn * 16));
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (y1 < (y2 + 1)) {
            do Screen.drawHorizontalLine(x1,x2,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, det;
        let dy = -r;
        while (dy < (r + 1)) {
            let det = Math.sqrt(r * r - (dy * dy));
            do Screen.drawHorizontalLine(x - det, x + det, y + dy);
            let dy = dy + 1;
        }
        return; 
    }

    function void updateBit(int address, int bit) {
        if (black) {
            let screen[address] = screen[address] | twoToTheIth[bit];
        } else {
            let screen[address] = screen[address] & (~twoToTheIth[bit]);
        }
        return;
    }
}
